 ------
 Java/Groovy integration


Java/Groovy integration

 Groovy Dice leverage the Groovy's dynamic capabilities to create a better way
 to express dice rolls.

* Groovy Dice initialization

 Before show you how to integrate your application with Groovy Dice, we
 <<must>> learn how to initialize the Groovy Dice engine.
 
 Take a look at the following Java code:
 
+----------------------------
import net.sf.groovydice.*;

public class MyDiceRollerApp {
    static {
        new GroovyDice().initialize();
    }

    public static void main(String[] args) {
        // now we can roll our dice!
    }
}
+----------------------------
 
 In this code, the <<<initialize()>>> method is called from within a
 <<<static>>> block. Since we just need to invoke the <<<initialize()>>>
 method once for a given application, it's fine to put that call inside a
 <<<static>>> block.

** Why do we need to "initialize" the Groovy Dice engine?
 
 During the initialization step, the behavior of some classes is modified
 <on-the-fly>. One example:
 
+----------------------------
2.d20
+----------------------------
 
 Here, we're just calling <<<getD20()>>> method on <<<2>>> instance, which
 is an <<<Integer>>>. But, if you are a Java or Groovy programmer, you know
 that <<<Integer>>> instances doesn't have such method.
 
 That's why the initialization step is necessary; all the "magic" needed to
 add such methods (among other things) is done here.